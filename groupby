create database group_by_db;
use group_by_db;
-- CHECK OUT PARTITION BY(CODE AT THE END)  VS GROUP BY
-- GROUP BY GIVES BASICALLY SUMMARISES THE ANSWER
-- WHERE AS PARTITION BY GIVE HOW MANY TIMES SALES ARE DONE ON A SINGLE ROW FOR EACH ITEM
create table sales(
id int auto_increment primary key,
product_id int,
quantity int,
price decimal(10,2),
sale_date date
);

insert into sales(product_id,quantity,price,sale_date)values
(1,2,200,'2024-06-21'),
(2,1,2000,'2024-06-11'),
(3,2,3000,'2023-05-21'),
(4,10,20990,'2024-06-09'),
(1,2,200,'2024-06-25');

select * from sales
order by sale_date asc;

insert into sales(product_id,quantity,price,sale_date)values
(1,2,440,'2024-06-21');

-- count with group by
-- count how many times sale
select product_id, count(*) as total_sales
from sales
group by product_id;

-- sum with group by
-- sum the quantity sold per product
select product_id,sum(quantity) as tot_quantity
from sales
group by product_id
order by tot_quantity; -- asc or desc order

-- avg with group by
select product_id,avg(price) as avg_price
from sales
group by product_id;

-- min with grp by
select product_id,min(price) as minm_price
from sales
group by product_id;

select product_id,
		count(*) as toot_sales,
        sum(quantity) as tot_quantity1,
        avg(price) as avg_price1,
        min(price) as minm_price1,
        max(price) as max_price
from sales
group by product_id;


select product_id,sum(quantity) as total_quantity
from sales
group by product_id
having sum(quantity)>2;

select product_id,count(*) as total_sales
from sales
group by product_id
having count(*)>2;

select product_id,avg(price) as avgprice
from sales
group by product_id
having avg(price)>280;

select product_id,
		 avg(price) as avg_price1,
        sum(quantity) as tot_quantity1
from sales
group by product_id
having sum(quantity)>=2 and avg(price)>100;

-- GROUP BY is used to aggregate data and reduce the number of rows
-- by collapsing them into summary rows based on the grouping columns.
-- PARTITION BY is used with window functions to compute values across 
-- a set of table rows that are somehow related to the current row, while retaining the individual rows.

SELECT 
    id,
    product_id,
    quantity,
    price,
    sale_date,
    COUNT(*) OVER (
        PARTITION BY product_id 
    ) AS cumulative_number_of_sales
FROM sales
ORDER BY product_id;
